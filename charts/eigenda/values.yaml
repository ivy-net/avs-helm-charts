# Optionally override the name of the chart
nameOverride: ""

# Optionally override the full name of the chart
fullnameOverride: ""

# Number of replicas to deploy
replicaCount: 1

# Additional labels to add to resources
labels: {}

# Secrets for pulling images from a private registry
imagePullSecrets: []

# List of ports to expose from the service and container
ports:
  # Example port configuration for metrics service
  api:
    port: 9091
    targetPort: 9091
  metrics:
    port: 9092
    targetPort: 9092
  retrieval:
    port: 32104
    targetPort: 32004
  dispersal:
    port: 32105
    targetPort: 32005
  dispersalv2:
    port: 32106
    targetPort: 32006
  retrievalv2:
    port: 32107
    targetPort: 32007
  reverseproxy:
    port: 32004
    targetPort: 32004


service:
  # Annotations to add to the service
  annotations: {}

  # Type of service to create
  type: ClusterIP

ingress:
  # Annotations to add to the ingress
  annotations: {}

  # Enable or disable the ingress
  enabled: false

  # Hostname for the ingress
  host: example.com

register:
  # Enable or disable the register container
  enabled: false

  # Configuration for the register container image
  image:
    # Image registry for the register container
    repository: <IMAGE_REGISTRY>

    # Image pull policy for the register container
    pullPolicy: Always

    # Image tag for the register container
    tag: "<IMAGE_TAG>"

  # Arguments to pass to the register container
  args:
    - --config=/app/config/worker-conf.toml
pvc:
  size: 30Gi
  storageClassName: default
  annotations: {}
  labels: {}

# Node selector for the pod
nodeSelector: {}

# Tolerations for the pod
tolerations: []

# Affinity rules for the pod
affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true

  # Annotations to add to the service account
  annotations: {}

  # The name of the service account to use. If not set and create is true, a name is generated using the fullname template
  name: ""

# Annotations to add to the pod
podAnnotations: {}

# Security context for the pod
podSecurityContext: {}
# Example security context
# fsGroup: 2000

# Security context for the container
securityContext: {}
# Example security context
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

# Volumes for the pod
volumes: []

node:
  # Configuration for the node container image
  image:
    repository: ghcr.io/layr-labs/eigenda/opr-node
    pullPolicy: Always
    tag: "latest"

  # Ports to expose from the node container
  nodeApiPort: 9091
  metricsPort: 9092
  internalRetrievalPort: 32004
  dispersalPort: 32005
  dispersalPortv2: 32006
  internalRetrievalPortv2: 32007
  # Resource limits and requests for the node container
  resources: {}

  # Environment variables for the node container
  volumeMounts: []
  env: []

  # Arguments to pass to the node container
  args: []

# Ports to expose from the node container
reverseProxy:
  nodeRetrievalPort: 32004

configs:
  # These are used for testing purpose
  NODE_TEST_PRIVATE_BLS: ""
  NODE_PRIVATE_KEY: ""

  # EigenDA specific configs
  NODE_EXPIRATION_POLL_INTERVAL: "180"
  NODE_CACHE_ENCODED_BLOBS: "true"
  NODE_NUM_WORKERS: "1"
  NODE_DISPERSAL_PORT: "32005"
  NODE_V2_DISPERSAL_PORT: "32006"

  # This flag defines a runtime mode. Acceptable inputs are v1-only, v2-only, v1-and-v2
  NODE_RUNTIME_MODE: "v1-and-v2"

  # This is a dummy value for now. This won't be used as we are explicitly asking for quorum while opting in/out
  # In future release, this will be removed
  NODE_QUORUM_ID_LIST: "0"

  NODE_VERBOSE: "true"
  NODE_RETRIEVAL_PORT: "32004"
  NODE_V2_RETRIEVAL_PORT: "32007"
  NODE_TIMEOUT: "20s"
  NODE_SRS_ORDER: "268435456"
  NODE_SRS_LOAD: "131072"

  # If you are using a reverse proxy in a shared network space, the reverse proxy should listen at $NODE_DISPERSAL_PORT
  # and forward the traffic to $NODE_INTERNAL_DISPERSAL_PORT, and similarly for retrieval. The DA node will register the
  # $NODE_DISPERSAL_PORT port on the chain and listen for the reverse proxy at $NODE_INTERNAL_DISPERSAL_PORT.
  NODE_INTERNAL_DISPERSAL_PORT: "32105"
  NODE_INTERNAL_RETRIEVAL_PORT: "32104"
  NODE_INTERNAL_V2_DISPERSAL_PORT: "32106"
  NODE_INTERNAL_V2_RETRIEVAL_PORT: "32107"


  # Reachability Check
  NODE_REACHABILITY_POLL_INTERVAL: "60"
  NODE_DATAAPI_URL: "https://dataapi-holesky.eigenda.xyz"

  # EigenDA mounted locations
  NODE_ECDSA_KEY_FILE: "/app/operator_keys/ecdsa_key.json"
  NODE_BLS_KEY_FILE: "/app/operator_keys/bls_key.json"
  NODE_G1_PATH: "/app/g1.point"
  NODE_G2_POWER_OF_2_PATH: "/app/g2.point.powerOf2"
  NODE_CACHE_PATH: "/app/cache"
  NODE_LOG_PATH: "/app/logs/opr.log"
  NODE_DB_PATH: "/data/operator/db"

  # Node logs configs
  NODE_LOG_LEVEL: "debug"
  NODE_LOG_FORMAT: "text"

  # Metrics specific configs
  NODE_ENABLE_METRICS: "true"
  NODE_METRICS_PORT: "9092"

  # Node API specific configs
  NODE_ENABLE_NODE_API: "true"
  NODE_API_PORT: "9091"

  # Holesky smart contracts
  NODE_EIGENDA_SERVICE_MANAGER: "0xD4A7E1Bd8015057293f0D0A557088c286942e84b"
  NODE_BLS_OPERATOR_STATE_RETRIVER: "0xB4baAfee917fb4449f5ec64804217bccE9f46C67"

  # Churner URL
  NODE_CHURNER_URL: "CHURNER-HOLESKY.EIGENDA.XYZ:443"

  # The name of the header used to get the client IP address
  # If set to empty string, the IP address will be taken from the connection.
  # The rightmost value of the header will be used.
  NODE_CLIENT_IP_HEADER: "x-real-ip"
  # How often to check the public IP address of the node. Set this to 0 to disable
  # automatic IP address updating (if you have a stable IP address)
  NODE_PUBLIC_IP_CHECK_INTERVAL: "10s"

  ###############################################################################
  ####### TODO: Operators please update below values for your node ##############
  ###############################################################################
  # TODO: IP of your node
  NODE_HOSTNAME: "YOUR_NODE_IP"

  # Nginx configuration for the reverse proxy
  REQUEST_LIMIT: "10r/s"
  NODE_HOST: "localhost"
  BURST_LIMIT: "50"

  # TODO: Operators need to point this to a working chain RPC
  NODE_CHAIN_RPC: "https://ethereum-holesky-rpc.publicnode.com"
  NODE_CHAIN_ID: "17000"

  #  # TODO: Operators need to update this to their own paths
  #  USER_HOME: "/app"
  #  EIGENLAYER_HOME: "/app/.eigenlayer"
  #  EIGENDA_HOME: "/app/.eigenlayer/eigenda/holesky"
  #
  #  NODE_LOG_PATH_HOST: "/app/logs"
  #  NODE_G1_PATH_HOST: "/app.eigenda-operator-setup/resources/g1.point"
  #  NODE_G2_PATH_HOST: "/app/eigenda-operator-setup/resources/g2.point.powerOf2"
  #  NODE_DB_PATH_HOST: "/app/db"
  #  NODE_CACHE_PATH_HOST: "/app/eigenda-operator-setup/resources/cache"
  #
  #  # TODO: Operators need to update this to their own keys
  #  NODE_ECDSA_KEY_FILE_HOST: "/app/.eigenlayer/operator_keys/opr.ecdsa.key.json"
  #  NODE_BLS_KEY_FILE_HOST: "/app/.eigenlayer/operator_keys/opr.bls.key.json"

  # TODO: The IP provider service used to obtain a node's public IP [seeip (default), ipify]
  NODE_PUBLIC_IP_PROVIDER: "seeip"
